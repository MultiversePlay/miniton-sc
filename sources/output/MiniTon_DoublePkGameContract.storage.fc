;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice to, int bounce, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: MatchInfo
;; TLB: _ id1:uint32 uid1:uint64 address1:address status1:uint8 id2:uint32 uid2:uint64 address2:address status2:uint8 amount:coins rewards:coins time:uint32 = MatchInfo
;;

builder $MatchInfo$_store(builder build_0, (int, int, slice, int, int, int, slice, int, int, int, int) v) inline_ref {
    var (v'id1, v'uid1, v'address1, v'status1, v'id2, v'uid2, v'address2, v'status2, v'amount, v'rewards, v'time) = v;
    build_0 = build_0.store_uint(v'id1, 32);
    build_0 = build_0.store_uint(v'uid1, 64);
    build_0 = __tact_store_address(build_0, v'address1);
    build_0 = build_0.store_uint(v'status1, 8);
    build_0 = build_0.store_uint(v'id2, 32);
    build_0 = build_0.store_uint(v'uid2, 64);
    build_0 = __tact_store_address(build_0, v'address2);
    build_0 = build_0.store_uint(v'status2, 8);
    build_0 = build_0.store_coins(v'amount);
    build_0 = build_0.store_coins(v'rewards);
    build_0 = build_0.store_uint(v'time, 32);
    return build_0;
}

cell $MatchInfo$_store_cell((int, int, slice, int, int, int, slice, int, int, int, int) v) inline {
    return $MatchInfo$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, slice, int, int, int, int)) $MatchInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'id1, int vvv'uid1, slice vvv'address1, int vvv'status1, int vvv'id2, int vvv'uid2, slice vvv'address2, int vvv'status2, int vvv'amount, int vvv'rewards, int vvv'time) = __tact_tuple_destroy_11(v);
    return (vvv'id1, vvv'uid1, vvv'address1, vvv'status1, vvv'id2, vvv'uid2, vvv'address2, vvv'status2, vvv'amount, vvv'rewards, vvv'time);
}

cell $MatchInfo$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $MatchInfo$_store_cell($MatchInfo$_not_null(v));
}

(slice, ((int, int, slice, int, int, int, slice, int, int, int, int))) $MatchInfo$_load(slice sc_0) inline_ref {
    var v'id1 = sc_0~load_uint(32);
    var v'uid1 = sc_0~load_uint(64);
    var v'address1 = sc_0~__tact_load_address();
    var v'status1 = sc_0~load_uint(8);
    var v'id2 = sc_0~load_uint(32);
    var v'uid2 = sc_0~load_uint(64);
    var v'address2 = sc_0~__tact_load_address();
    var v'status2 = sc_0~load_uint(8);
    var v'amount = sc_0~load_coins();
    var v'rewards = sc_0~load_coins();
    var v'time = sc_0~load_uint(32);
    return (sc_0, (v'id1, v'uid1, v'address1, v'status1, v'id2, v'uid2, v'address2, v'status2, v'amount, v'rewards, v'time));
}

tuple $MatchInfo$_as_optional((int, int, slice, int, int, int, slice, int, int, int, int) v) inline {
    var (v'id1, v'uid1, v'address1, v'status1, v'id2, v'uid2, v'address2, v'status2, v'amount, v'rewards, v'time) = v;
    return __tact_tuple_create_11(v'id1, v'uid1, v'address1, v'status1, v'id2, v'uid2, v'address2, v'status2, v'amount, v'rewards, v'time);
}

tuple $MatchInfo$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $MatchInfo$_as_optional(sc~$MatchInfo$_load());
}

(int, int, slice, int, int, int, slice, int, int, int, int) $MatchInfo$_to_external(((int, int, slice, int, int, int, slice, int, int, int, int)) v) inline {
    var (v'id1, v'uid1, v'address1, v'status1, v'id2, v'uid2, v'address2, v'status2, v'amount, v'rewards, v'time) = v; 
    return (v'id1, v'uid1, v'address1, v'status1, v'id2, v'uid2, v'address2, v'status2, v'amount, v'rewards, v'time);
}

((int, int, slice, int, int, int, slice, int, int, int, int)) $MatchInfo$_constructor_id1_uid1_address1_status1_id2_uid2_address2_status2_amount_rewards_time(int id1, int uid1, slice address1, int status1, int id2, int uid2, slice address2, int status2, int amount, int rewards, int time) inline {
    return (id1, uid1, address1, status1, id2, uid2, address2, status2, amount, rewards, time);
}

;;
;; Type: MatchInfoMessage
;; Header: 0x85c9b30a
;; TLB: match_info_message#85c9b30a id:int257 match_info:MatchInfo{id1:uint32,uid1:uint64,address1:address,status1:uint8,id2:uint32,uid2:uint64,address2:address,status2:uint8,amount:coins,rewards:coins,time:uint32} = MatchInfoMessage
;;

(slice, ((int, (int, int, slice, int, int, int, slice, int, int, int, int)))) $MatchInfoMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2244588298);
    var v'id = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'match_info = sc_1~$MatchInfo$_load();
    return (sc_0, (v'id, v'match_info));
}

((int, (int, int, slice, int, int, int, slice, int, int, int, int))) $MatchInfoMessage$_tensor_cast((int, (int, int, slice, int, int, int, slice, int, int, int, int)) v) asm "NOP";

;;
;; Type: MatchResult
;; Header: 0x52091528
;; TLB: match_result#52091528 id:uint32 victory_uid:uint32 defeat_uid:^string score:^string total_amount:coins rewards:coins time:uint32 = MatchResult
;;

builder $MatchResult$_store(builder build_0, (int, int, slice, slice, int, int, int) v) inline_ref {
    var (v'id, v'victory_uid, v'defeat_uid, v'score, v'total_amount, v'rewards, v'time) = v;
    build_0 = store_uint(build_0, 1376326952, 32);
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_uint(v'victory_uid, 32);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'defeat_uid).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'score).end_cell());
    build_0 = build_0.store_coins(v'total_amount);
    build_0 = build_0.store_coins(v'rewards);
    build_0 = build_0.store_uint(v'time, 32);
    return build_0;
}

cell $MatchResult$_store_cell((int, int, slice, slice, int, int, int) v) inline {
    return $MatchResult$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, int, int, int)) $MatchResult$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'id, int vvv'victory_uid, slice vvv'defeat_uid, slice vvv'score, int vvv'total_amount, int vvv'rewards, int vvv'time) = __tact_tuple_destroy_7(v);
    return (vvv'id, vvv'victory_uid, vvv'defeat_uid, vvv'score, vvv'total_amount, vvv'rewards, vvv'time);
}

cell $MatchResult$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $MatchResult$_store_cell($MatchResult$_not_null(v));
}

(slice, ((int, int, slice, slice, int, int, int))) $MatchResult$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 1376326952);
    var v'id = sc_0~load_uint(32);
    var v'victory_uid = sc_0~load_uint(32);
    var v'defeat_uid = sc_0~load_ref().begin_parse();
    var v'score = sc_0~load_ref().begin_parse();
    var v'total_amount = sc_0~load_coins();
    var v'rewards = sc_0~load_coins();
    var v'time = sc_0~load_uint(32);
    return (sc_0, (v'id, v'victory_uid, v'defeat_uid, v'score, v'total_amount, v'rewards, v'time));
}

tuple $MatchResult$_as_optional((int, int, slice, slice, int, int, int) v) inline {
    var (v'id, v'victory_uid, v'defeat_uid, v'score, v'total_amount, v'rewards, v'time) = v;
    return __tact_tuple_create_7(v'id, v'victory_uid, v'defeat_uid, v'score, v'total_amount, v'rewards, v'time);
}

tuple $MatchResult$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $MatchResult$_as_optional(sc~$MatchResult$_load());
}

(int, int, slice, slice, int, int, int) $MatchResult$_to_external(((int, int, slice, slice, int, int, int)) v) inline {
    var (v'id, v'victory_uid, v'defeat_uid, v'score, v'total_amount, v'rewards, v'time) = v; 
    return (v'id, v'victory_uid, v'defeat_uid, v'score, v'total_amount, v'rewards, v'time);
}

;;
;; Type: MatchDeleteMessage
;; Header: 0xbc5cdfe2
;; TLB: match_delete_message#bc5cdfe2 arr:dict<int, int> length:uint8 start:uint8 = MatchDeleteMessage
;;

(slice, ((cell, int, int))) $MatchDeleteMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3160203234);
    var v'arr = sc_0~load_dict();
    var v'length = sc_0~load_uint(8);
    var v'start = sc_0~load_uint(8);
    return (sc_0, (v'arr, v'length, v'start));
}

((cell, int, int)) $MatchDeleteMessage$_tensor_cast((cell, int, int) v) asm "NOP";

;;
;; Type: MatchResultMessage
;; Header: 0x17bb7f92
;; TLB: match_result_message#17bb7f92 matchResult:MatchResult{id:uint32,victory_uid:uint32,defeat_uid:^string,score:^string,total_amount:coins,rewards:coins,time:uint32} msg1:^string msg2:^string delete:MatchDeleteMessage{arr:dict<int, int>,length:uint8,start:uint8} = MatchResultMessage
;;

(slice, (((int, int, slice, slice, int, int, int), slice, slice, (cell, int, int)))) $MatchResultMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 398163858);
    var v'matchResult = sc_0~$MatchResult$_load();
    var v'msg1 = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'msg2 = sc_1~load_ref().begin_parse();
    var v'delete = sc_1~$MatchDeleteMessage$_load();
    return (sc_0, (v'matchResult, v'msg1, v'msg2, v'delete));
}

(((int, int, slice, slice, int, int, int), slice, slice, (cell, int, int))) $MatchResultMessage$_tensor_cast(((int, int, slice, slice, int, int, int), slice, slice, (cell, int, int)) v) asm "NOP";

;;
;; Type: Withdraw
;; Header: 0x0ba69751
;; TLB: withdraw#0ba69751 amount:coins = Withdraw
;;

(slice, ((int))) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 195467089);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: MinTonForStorage
;; Header: 0x8c83b775
;; TLB: min_ton_for_storage#8c83b775 minTon:coins = MinTonForStorage
;;

(slice, ((int))) $MinTonForStorage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2357442421);
    var v'minTon = sc_0~load_coins();
    return (sc_0, (v'minTon));
}

;;
;; Type: DoublePkGameContract
;;

builder $DoublePkGameContract$_store(builder build_0, (int, slice, cell, cell, int, int) v) inline {
    var (v'minTonForStorage, v'owner, v'matches, v'matchesResults, v'matchesCount, v'matchesResultsCount) = v;
    build_0 = build_0.store_coins(v'minTonForStorage);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'matches);
    build_0 = build_0.store_dict(v'matchesResults);
    build_0 = build_0.store_uint(v'matchesCount, 32);
    build_0 = build_0.store_uint(v'matchesResultsCount, 32);
    return build_0;
}

(slice, ((int, slice, cell, cell, int, int))) $DoublePkGameContract$_load(slice sc_0) inline {
    var v'minTonForStorage = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    var v'matches = sc_0~load_dict();
    var v'matchesResults = sc_0~load_dict();
    var v'matchesCount = sc_0~load_uint(32);
    var v'matchesResultsCount = sc_0~load_uint(32);
    return (sc_0, (v'minTonForStorage, v'owner, v'matches, v'matchesResults, v'matchesCount, v'matchesResultsCount));
}

(int, slice, cell, cell, int, int) $DoublePkGameContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$DoublePkGameContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $DoublePkGameContract$_contract_init();
    }
}

() $DoublePkGameContract$_contract_store((int, slice, cell, cell, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $DoublePkGameContract$_store(b, v);
    set_data(b.end_cell());
}