;;
;; Header files for DoublePkGameContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $MatchInfo$_store
builder $MatchInfo$_store(builder build_0, (int, int, slice, int, int, int, slice, int, int, int, int) v) inline_ref;

;; $MatchInfo$_store_cell
cell $MatchInfo$_store_cell((int, int, slice, int, int, int, slice, int, int, int, int) v) inline;

;; $MatchInfo$_not_null
((int, int, slice, int, int, int, slice, int, int, int, int)) $MatchInfo$_not_null(tuple v) inline;

;; $MatchInfo$_store_opt
cell $MatchInfo$_store_opt(tuple v) inline;

;; $MatchInfo$_load
(slice, ((int, int, slice, int, int, int, slice, int, int, int, int))) $MatchInfo$_load(slice sc_0) inline_ref;

;; $MatchInfo$_as_optional
tuple $MatchInfo$_as_optional((int, int, slice, int, int, int, slice, int, int, int, int) v) inline;

;; $MatchInfo$_load_opt
tuple $MatchInfo$_load_opt(cell cl) inline;

;; $MatchInfoMessage$_load
(slice, ((int, (int, int, slice, int, int, int, slice, int, int, int, int)))) $MatchInfoMessage$_load(slice sc_0) inline;

;; $MatchResult$_store
builder $MatchResult$_store(builder build_0, (int, int, slice, slice, int, int, int) v) inline_ref;

;; $MatchResult$_store_cell
cell $MatchResult$_store_cell((int, int, slice, slice, int, int, int) v) inline;

;; $MatchResult$_not_null
((int, int, slice, slice, int, int, int)) $MatchResult$_not_null(tuple v) inline;

;; $MatchResult$_store_opt
cell $MatchResult$_store_opt(tuple v) inline;

;; $MatchResult$_load
(slice, ((int, int, slice, slice, int, int, int))) $MatchResult$_load(slice sc_0) inline_ref;

;; $MatchResult$_as_optional
tuple $MatchResult$_as_optional((int, int, slice, slice, int, int, int) v) inline;

;; $MatchResult$_load_opt
tuple $MatchResult$_load_opt(cell cl) inline;

;; $MatchDeleteMessage$_load
(slice, ((cell, int, int))) $MatchDeleteMessage$_load(slice sc_0) inline;

;; $MatchResultMessage$_load
(slice, (((int, int, slice, slice, int, int, int), slice, slice, (cell, int, int)))) $MatchResultMessage$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $MinTonForStorage$_load
(slice, ((int))) $MinTonForStorage$_load(slice sc_0) inline;

;; $DoublePkGameContract$_store
builder $DoublePkGameContract$_store(builder build_0, (int, slice, cell, cell, int, int) v) inline;

;; $DoublePkGameContract$_load
(slice, ((int, slice, cell, cell, int, int))) $DoublePkGameContract$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $MatchInfo$_to_external
(int, int, slice, int, int, int, slice, int, int, int, int) $MatchInfo$_to_external(((int, int, slice, int, int, int, slice, int, int, int, int)) v) inline;

;; $MatchResult$_to_external
(int, int, slice, slice, int, int, int) $MatchResult$_to_external(((int, int, slice, slice, int, int, int)) v) inline;

;; $DoublePkGameContract$_contract_init
(int, slice, cell, cell, int, int) $DoublePkGameContract$_contract_init() impure inline_ref;

;; $DoublePkGameContract$_contract_load
(int, slice, cell, cell, int, int) $DoublePkGameContract$_contract_load() impure inline_ref;

;; $DoublePkGameContract$_contract_store
() $DoublePkGameContract$_contract_store((int, slice, cell, cell, int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $MatchInfo$_constructor_id1_uid1_address1_status1_id2_uid2_address2_status2_amount_rewards_time
((int, int, slice, int, int, int, slice, int, int, int, int)) $MatchInfo$_constructor_id1_uid1_address1_status1_id2_uid2_address2_status2_amount_rewards_time(int id1, int uid1, slice address1, int status1, int id2, int uid2, slice address2, int status2, int amount, int rewards, int time) inline;

;; $DoublePkGameContract$_fun_getMatchInfo
((int, slice, cell, cell, int, int), (int, int, slice, int, int, int, slice, int, int, int, int)) $DoublePkGameContract$_fun_getMatchInfo((int, slice, cell, cell, int, int) $self, int $id) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $DoublePkGameContract$_fun_forward
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_forward((int, slice, cell, cell, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $DoublePkGameContract$_fun_reply
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_reply((int, slice, cell, cell, int, int) $self, cell $body) impure inline;

;; $DoublePkGameContract$_fun_joinMatch
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_joinMatch((int, slice, cell, cell, int, int) $self, (int, (int, int, slice, int, int, int, slice, int, int, int, int)) $v) impure inline_ref;

;; $DoublePkGameContract$_fun_deleteMatchInfo
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_deleteMatchInfo((int, slice, cell, cell, int, int) $self, int $id) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice to, int bounce, int value, int mode, cell body) inline;

;; $DoublePkGameContract$_fun_sendRewards
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_sendRewards((int, slice, cell, cell, int, int) $self, slice $address, (int, int, slice, slice, int, int, int) $mr, slice $msg1, slice $msg2) impure inline_ref;

;; $DoublePkGameContract$_fun_giveRewards
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_giveRewards((int, slice, cell, cell, int, int) $self, ((int, int, slice, slice, int, int, int), slice, slice, (cell, int, int)) $v) impure inline_ref;

;; $DoublePkGameContract$_fun_deleteMatches
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_deleteMatches((int, slice, cell, cell, int, int) $self, (cell, int, int) $v) impure inline_ref;

;; $DoublePkGameContract$_fun_matchInfo
((int, slice, cell, cell, int, int), (int, int, slice, int, int, int, slice, int, int, int, int)) $DoublePkGameContract$_fun_matchInfo((int, slice, cell, cell, int, int) $self, int $match_id) impure inline_ref;

;; $DoublePkGameContract$_fun_matchResult
((int, slice, cell, cell, int, int), (int, int, slice, slice, int, int, int)) $DoublePkGameContract$_fun_matchResult((int, slice, cell, cell, int, int) $self, int $match_id) impure inline_ref;

;; $DoublePkGameContract$_fun_matchesCount
((int, slice, cell, cell, int, int), int) $DoublePkGameContract$_fun_matchesCount((int, slice, cell, cell, int, int) $self) impure inline_ref;

;; $DoublePkGameContract$_fun_matchesResultsCount
((int, slice, cell, cell, int, int), int) $DoublePkGameContract$_fun_matchesResultsCount((int, slice, cell, cell, int, int) $self) impure inline_ref;

;; $DoublePkGameContract$_fun_balance
((int, slice, cell, cell, int, int), int) $DoublePkGameContract$_fun_balance((int, slice, cell, cell, int, int) $self) impure inline_ref;

;; $DoublePkGameContract$_fun_minTonForStorage
((int, slice, cell, cell, int, int), int) $DoublePkGameContract$_fun_minTonForStorage((int, slice, cell, cell, int, int) $self) impure inline_ref;

;; $DoublePkGameContract$_fun_notify
((int, slice, cell, cell, int, int), ()) $DoublePkGameContract$_fun_notify((int, slice, cell, cell, int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
